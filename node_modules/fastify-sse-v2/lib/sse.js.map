{"version":3,"sources":["../src/sse.ts"],"names":["transformAsyncIterable","source","message","serializeSSEEvent","event","data","chunk","payload","id","retry"],"mappings":";;;;;;;;AAEO,gBAAgBA,sBAAhB,CAAuCC,MAAvC,EAAmG;AACxG,aAAW,MAAMC,OAAjB,IAA4BD,MAA5B,EAAoC;AAClC,UAAME,iBAAiB,CAACD,OAAD,CAAvB;AACD;;AACD,QAAMC,iBAAiB,CAAC;AAACC,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,IAAI,EAAE;AAArB,GAAD,CAAvB;AACD;;AAEM,SAASF,iBAAT,CAA2BG,KAA3B,EAAwD;AAC7D,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAGD,KAAK,CAACE,EAAT,EAAa;AACXD,IAAAA,OAAO,IAAK,OAAMD,KAAK,CAACE,EAAG,IAA3B;AACD;;AACD,MAAGF,KAAK,CAACF,KAAT,EAAgB;AACdG,IAAAA,OAAO,IAAK,UAASD,KAAK,CAACF,KAAM,IAAjC;AACD;;AACD,MAAGE,KAAK,CAACD,IAAT,EAAe;AACbE,IAAAA,OAAO,IAAK,SAAQD,KAAK,CAACD,IAAK,IAA/B;AACD;;AACD,MAAGC,KAAK,CAACG,KAAT,EAAgB;AACdF,IAAAA,OAAO,IAAK,UAASD,KAAK,CAACG,KAAM,IAAjC;AACD;;AACD,MAAG,CAACF,OAAJ,EAAa;AACX,WAAO,EAAP;AACD;;AACDA,EAAAA,OAAO,IAAI,IAAX;AACA,SAAOA,OAAP;AACD","sourcesContent":["import {EventMessage} from \"fastify\";\n\nexport async function* transformAsyncIterable(source: AsyncIterable<EventMessage>): AsyncIterable<string> {\n  for await (const message of source) {\n    yield serializeSSEEvent(message);\n  }\n  yield serializeSSEEvent({event: \"end\", data: \"Stream closed\"});\n}\n\nexport function serializeSSEEvent(chunk: EventMessage): string {\n  let payload = \"\";\n  if(chunk.id) {\n    payload += `id: ${chunk.id}\\n`;\n  }\n  if(chunk.event) {\n    payload += `event: ${chunk.event}\\n`;\n  }\n  if(chunk.data) {\n    payload += `data: ${chunk.data}\\n`;\n  }\n  if(chunk.retry) {\n    payload += `retry: ${chunk.retry}\\n`;\n  }\n  if(!payload) {\n    return \"\";\n  }\n  payload += \"\\n\";\n  return payload;\n}\n"],"file":"sse.js"}