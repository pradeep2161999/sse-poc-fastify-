{"version":3,"sources":["../src/plugin.ts"],"names":["plugin","instance","options","decorateReply","source","raw","headersSent","sseContext","Object","entries","getHeaders","forEach","key","value","setHeader","write","retry","retryDelay","handleAsyncIterable","push","reply","pipe"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,MAA4C,GACrD,gBAAgBC,QAAhB,EAA0BC,OAA1B,EAAkD;AAChDD,EAAAA,QAAQ,CAACE,aAAT,CACE,KADF,EAEE,UAA8BC,MAA9B,EAAwF;AAEtF;AACA,QAAG,CAAC,KAAKC,GAAL,CAASC,WAAb,EAA0B;AACxB,WAAKC,UAAL,GAAiB;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAjB;AACAI,MAAAA,MAAM,CAACC,OAAP,CAAe,KAAKC,UAAL,EAAf,EAAkCC,OAAlC,CAA0C,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1D,aAAKR,GAAL,CAASS,SAAT,CAAmBF,GAAnB,EAAwBC,KAAxB;AACD,OAFD;AAGA,WAAKR,GAAL,CAASS,SAAT,CAAmB,cAAnB,EAAkC,mBAAlC;AACA,WAAKT,GAAL,CAASS,SAAT,CAAmB,YAAnB,EAAiC,YAAjC;AACA,WAAKT,GAAL,CAASS,SAAT,CAAmB,eAAnB,EAAoC,uBAApC;AACA,WAAKT,GAAL,CAASS,SAAT,CAAmB,kBAAnB,EAAuC,CAAvC;AACA,WAAKT,GAAL,CAASU,KAAT,CAAe,4BAAkB;AAACC,QAAAA,KAAK,EAAEd,OAAO,CAACe,UAAR,IAAsB;AAA9B,OAAlB,CAAf;AACAC,MAAAA,mBAAmB,CAAC,IAAD,EAAO,KAAKX,UAAL,CAAgBH,MAAvB,CAAnB;AACD;;AACD,QAAG,2BAAgBA,MAAhB,CAAH,EAA4B;AAC1B,aAAOc,mBAAmB,CAAC,IAAD,EAAOd,MAAP,CAA1B;AACD,KAFD,MAEO;AACL,WAAKG,UAAL,CAAgBH,MAAhB,CAAuBe,IAAvB,CAA4Bf,MAA5B;AACA;AACD;AACF,GAvBH;AAwBD,CA1BE;;;;AA6BP,SAASc,mBAAT,CAA6BE,KAA7B,EAAkDhB,MAAlD,EAA6F;AAC3F,2BAAS,iCAAuBA,MAAvB,CAAT,EAAyCiB,IAAzC,CAA8CD,KAAK,CAACf,GAApD;AACD","sourcesContent":["import {EventMessage, FastifyPluginAsync, FastifyReply} from \"fastify\";\nimport {SsePluginOptions} from \"./types\";\nimport {serializeSSEEvent, transformAsyncIterable} from \"./sse\";\nimport toStream from \"it-to-stream\";\nimport {isAsyncIterable} from \"./util\";\nimport pushable from \"it-pushable\";\n\nexport const plugin: FastifyPluginAsync<SsePluginOptions> =\n    async function (instance, options): Promise<void> {\n      instance.decorateReply(\n        \"sse\",\n        function (this: FastifyReply, source: AsyncIterable<EventMessage> | EventMessage): void {\n\n          //if this already set, it's not first event\n          if(!this.raw.headersSent) {\n            this.sseContext= {source: pushable<EventMessage>()};\n            Object.entries(this.getHeaders()).forEach(([key, value]) => {\n              this.raw.setHeader(key, value);\n            });\n            this.raw.setHeader(\"Content-Type\",\"text/event-stream\");\n            this.raw.setHeader(\"Connection\", \"keep-alive\");\n            this.raw.setHeader(\"Cache-Control\", \"no-cache,no-transform\");\n            this.raw.setHeader(\"x-no-compression\", 1);\n            this.raw.write(serializeSSEEvent({retry: options.retryDelay || 3000}));\n            handleAsyncIterable(this, this.sseContext.source);\n          }\n          if(isAsyncIterable(source)) {\n            return handleAsyncIterable(this, source);\n          } else {\n            this.sseContext.source.push(source);\n            return;\n          }\n        });\n    };\n\n\nfunction handleAsyncIterable(reply: FastifyReply, source: AsyncIterable<EventMessage>): void {\n  toStream(transformAsyncIterable(source)).pipe(reply.raw);\n}"],"file":"plugin.js"}